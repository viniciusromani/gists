//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `public.json`.
    static let publicJson = Rswift.FileResource(bundle: R.hostingBundle, name: "public", pathExtension: "json")
    /// Resource file `specific.json`.
    static let specificJson = Rswift.FileResource(bundle: R.hostingBundle, name: "specific", pathExtension: "json")
    
    /// `bundle.url(forResource: "public", withExtension: "json")`
    static func publicJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.publicJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "specific", withExtension: "json")`
    static func specificJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.specificJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `ic_gist`.
    static let ic_gist = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_gist")
    /// Image `ic_person`.
    static let ic_person = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_person")
    /// Image `ic_reload`.
    static let ic_reload = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_reload")
    
    /// `UIImage(named: "ic_gist", bundle: ..., traitCollection: ...)`
    static func ic_gist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_gist, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_person", bundle: ..., traitCollection: ...)`
    static func ic_person(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_person, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_reload", bundle: ..., traitCollection: ...)`
    static func ic_reload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_reload, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `GistCollectionViewCell`.
    static let gistCollectionViewCell = _R.nib._GistCollectionViewCell()
    
    /// `UINib(name: "GistCollectionViewCell", in: bundle)`
    static func gistCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gistCollectionViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `gistCollectionViewCellIdentifier`.
    static let gistCollectionViewCellIdentifier: Rswift.ReuseIdentifier<GistCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "gistCollectionViewCellIdentifier")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `UIViewController`, and contains static references to 1 segues.
    struct uiKitUIViewController {
      /// Segue identifier `showGistDetailIdentifier`.
      static let showGistDetailIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UIKit.UIViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showGistDetailIdentifier")
      
      /// Optionally returns a typed version of segue `showGistDetailIdentifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showGistDetailIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UIKit.UIViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.uiKitUIViewController.showGistDetailIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _GistCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GistCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "gistCollectionViewCellIdentifier"
      let name = "GistCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GistCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GistCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_gist") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_gist' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_reload") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_reload' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
